#define function addTwo(uint256, uint256) view returns(uint256)

/*
    NOTE: all macro declarations are annotated with the number of items they will take from the stack
    and the amount they will return upon completion. 
*/
#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector
    0x00                // Pushed [0] onto the stack
    calldataload        // Takes [0] as an input and pushes first 32 bytes of calldata onto the stack
    0xE0                // Pushes [224] onto the stack. This magic number represents 256 bits - 32 bits (28 bytes)
    shr                 // Shift right. When followed by the shr this will shift out calldata by 28 bytes and place the function selector onto the stack.

    // Jump to the implementation of the ADD_TWO function if the calldata matches the function selector
    __FUNC_SIG(addTwo) eq addTwo jumpi

    addTwo:
        ADD_TWO()
}

#define macro ADD_TWO() = takes(0) returns(0) {
    0x04 calldataload     // load first 32 bytes onto the stack - number 1
    0x24 calldataload     // load second 32 bytes onto the stack - number 2
    add                   // add number 1 and 2 and put the result onto the stack

    0x00 mstore           // place the result in memory
    0x20 0x00 return      // return the result
}